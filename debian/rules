#!/usr/bin/make -f

export DH_GOPKG := eng.vyatta.net/tacplus

GOBUILDDIR := _build
GO_PATH := $(CURDIR)/$(GOBUILDDIR)

# For golang plugins to work with the modules that load them, the paths to
# common code must match when building. This means that we need to use
# GOBUILDDIR in both plugin and plugin-using code so that the paths match.
# This is somewhat fragile, but does appear to work consistently.
#
# From version 1.38, dh-golang inserts the all/trimpath flags into any build
# that is not manually overridden, which matches a change made in Go 1.10.
#
# A further change was made in dh-golang 1.45 to match a change in Go 1.13
# where the build flags were simplified from all/trimpath=... to just using
# trimpath with no path specified.
#
DH_GOLANG_VER := $(shell dpkg-query -W -f='$${Version}' dh-golang)

ifeq (true,$(shell dpkg --compare-versions $(DH_GOLANG_VER) ge 1.45 && echo true))
	BUILD_ARGS_GO := -trimpath -v
else ifeq (true,$(shell dpkg --compare-versions $(DH_GOLANG_VER) ge 1.38 && echo true))
	BUILD_ARGS_GO := -gcflags=all=-trimpath="$(GO_PATH)/src" -asmflags=all=-trimpath="$(GO_PATH)/src"
else
	BUILD_ARGS :=
endif

%:
	dh $@ --with yang,golang,python3 --buildsystem=golang --builddirectory=$(GOBUILDDIR)

override_dh_auto_build: vet
	# configd/opd AAA plugin
	cd $(GOBUILDDIR)/src; \
	GOPATH=$(GO_PATH) \
	go build $(BUILD_ARGS_GO) -buildmode=plugin \
		-o tacplus.so eng.vyatta.net/tacplus/aaa-plugin/

vet:
	GOPATH=$(GO_PATH) go vet $$(find . -type f -name \*.go | \
	xargs dirname | sort -u | grep -v "/vendor/");
